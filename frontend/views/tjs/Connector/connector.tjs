function (map, view, layerStack) {
    let baseUrl = "http://localhost:5000/";
  showRectangle = function () {
    document.getElementById("rectangle").style.display = 'block';
    document.getElementById("paral").style.display = 'none';
  };
  showParal = function () {
    document.getElementById("rectangle").style.display = 'none';
    document.getElementById("paral").style.display = 'block';
  };

  function toRadians(angle) {
    return angle * (Math.PI / 180);
  }

  showParcels = function (lat, lon, figure) {
    var defExpr = '';
    if (figure === 'rectangle') {
      const shiftNSStr = document.getElementById("shiftNS").value;
      const shiftWEStr = document.getElementById("shiftWE").value;
      var shiftNSInMeters;
      var shiftWEInMeters;
      if (shiftNSStr === "" || shiftWEStr === "") {
        alert("Empty values. Setting defaults");
        shiftNSInMeters = 500;
        shiftWEInMeters = 500;
      } else {
        shiftNSInMeters = parseFloat(shiftNSStr);
        shiftWEInMeters = parseFloat(shiftWEStr);
      }
      const equatorDegreeLengthInMeters = 40075000 / 360;
      const metersInDegreeLatitude = 111128;
      const metersInDegreeLongitude = Math.abs(equatorDegreeLengthInMeters * Math.cos(toRadians(lat)));
      const latShift = shiftNSInMeters / metersInDegreeLatitude;
      const lonShift = shiftWEInMeters / metersInDegreeLongitude;
      const minLat = lat - latShift;
      const maxLat = lat + latShift;
      const minLon = lon - lonShift;
      const maxLon = lon + lonShift;
      defExpr = `CENTER_LAT > ${minLat} AND CENTER_LAT < ${maxLat} AND CENTER_LON > ${minLon} AND CENTER_LON < ${maxLon}`;
    } else if (figure === 'paral') {
      const height = document.getElementById("paralHeight").value;
      const length = document.getElementById("paralLength").value;
      const angle = document.getElementById("paralAngle").value;
      var heightInMeters, lengthInMeters, angleInDegrees;
      if (height === "" || length === "" || angle === "") {
        alert("Empty values. Setting defaults.");
        heightInMeters = 200;
        lengthInMeters = 1000;
        angleInDegrees = 30;
      } else {
        heightInMeters = parseFloat(height);
        lengthInMeters = parseFloat(length);
        angleInDegrees = parseFloat(angle);
      }
      const equatorDegreeLengthInMeters = 40075000 / 360;
      const metersInDegreeLatitude = 111128;
      const metersInDegreeLongitude = Math.abs(equatorDegreeLengthInMeters * Math.cos(lat));
      const heightInLatitude = heightInMeters / metersInDegreeLatitude;
      const flatLengthInMeters = lengthInMeters * Math.cos(toRadians(angleInDegrees));
      const flatLengthInLongitude = flatLengthInMeters / metersInDegreeLongitude;
      const l = flatLengthInLongitude / Math.cos(toRadians(angleInDegrees));
      const leftLongitude = lon;
      const rightLongitude = lon + flatLengthInLongitude;
      const a = Math.tan(toRadians(angleInDegrees));
      const b = lat - lon * Math.tan(toRadians(angleInDegrees));
      const bHigh = b + heightInLatitude;
      defExpr = `CENTER_LAT > (${a} * CENTER_LON + ${b}) AND CENTER_LAT < (${a} * CENTER_LON + ${bHigh}) AND CENTER_LON > ${leftLongitude} AND CENTER_LON < ${rightLongitude}`;
    }


    var connectorLayer = new FeatureLayer({
      id: "connectorLayer",
      url: "http://arcgis.epicland.com:6080/arcgis/rest/services/Test2/Service3/MapServer",
      outFields: ["OBJECTID", "LS1_Sale_Amount", "CENTER_LAT", "CENTER_LON"]
    });
    connectorLayer.definitionExpression = defExpr;
    map.layers.add(connectorLayer);
    layerStack.push(connectorLayer);
    view.popup.clear();
    view.popup.close();
  };


  view.on("click", function (event) {
    if (event.button == 2) {
      //    right mouse button
      view.hitTest(event)
        .then(function (response) {
          view.popup.clear();
          view.popup.close();
          lat = event.mapPoint.latitude;
          lon = event.mapPoint.longitude;
          view.popup.open({
            title: "Do you want to show parcels around this point?",
            location: event.mapPoint,
            content: "<button onclick='showRectangle()'>Setup rectangle</button><button onclick='showParal()'>Setup parallelogram</button>" +
              "<div id='rectangle' style='display: none;'><p>Setup rectangle to show</p>" +
              "<p><h3>Provide N-S rectangle length in meters?</h3><input type='number' id='shiftNS'></p>" +
              "<p><h3>Provide W-E rectangle length in meters?</h3><input type='number' id='shiftWE'></p>" +
              "<p><button onclick='showParcels(lat, lon, \"rectangle\");'>Show parcels</button></p></div>" +
              "<div id='paral' style='display: none;'><p>Setup parallelogram to show</p>" +
              "<p><h3>Provide parallelogram height</h3><input type='number' id='paralHeight'></p>" +
              "<p><h3>Provide parallelogram length</h3><input type='number' id='paralLength'></p>" +
              "<p><h3>Provide parallelogram angle</h3><input type='number' id='paralAngle'></p>" +
              "<p><button onclick='showParcels(lat, lon, \"paral\");'>Show parcels</button></p></div>"
          });

        });
    }
  });

  view.on("hold", function (event) {
    view.popup.clear();
    view.popup.close();
    if (event.button == 0) {
      view.hitTest(event)
        .then(function (response) {
          // console.log(response);
          if (response.results.length > 0) {
              getParcelsPrices([{"objectid": response.results[0].graphic.attributes.OBJECTID}], function (resPrice) {
                  console.log(resPrice);
                  var price = JSON.parse(resPrice)[0]["price"];
                  view.popup.open({
                      title: "Parcel",
                      location: response.results[0].mapPoint,
                      content: "<h1>ID: " + response.results[0].graphic.attributes.OBJECTID + "</h1>" +
                      "<h1>Price: " + price +  "</h1>"
                  });
              });

          } else {
            view.popup.open({
              title: "Parcel",
              content: "There is no parcel here",
              location: event.mapPoint

            });
          }
        });
    }

  });


    let getParcelsPrices = function(idsList, callback){
        var xhr = new XMLHttpRequest();
        xhr.open("POST", baseUrl + 'prices', true);
        xhr.setRequestHeader('Content-Type', 'application/json');
        xhr.onreadystatechange = function() {
            if (xhr.readyState === 4) {
                callback(xhr.response);
            }
        };
        xhr.send(JSON.stringify({
            ids: idsList
        }));
    };

/*    let ids = [{"objectid": 15}, {"objectid": 1025712}, {"objectid": 15781}];
    getParcelsPrices(ids, function (response) {
        console.log(response);
    });*/

    let getParcelsAltitudes = function(idsList, callback){
        var xhr = new XMLHttpRequest();
        xhr.open("POST", baseUrl + 'altitudes', true);
        xhr.setRequestHeader('Content-Type', 'application/json');
        xhr.onreadystatechange = function() {
            if (xhr.readyState === 4) {
                callback(xhr.response);
            }
        };
        xhr.send(JSON.stringify({
            points_list: idsList
        }));
    };

    /*let points_list = [{"latitude": 33.8, "longitude": -117.8}, {"latitude": 33.85, "longitude": -117.85}, {"latitude": 33.9, "longitude": -117.9}, {"latitude": 33.95, "longitude": -117.95}];
    getParcelsAltitudes(points_list, function (response) {
        console.log(response);
    });*/
}

////////////////////////////////////////////
