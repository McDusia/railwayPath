let railwaySize = 100;
let minimalRadius = 500;
require([
  "esri/views/MapView",
  "esri/Map",
  "esri/widgets/Sketch/SketchViewModel",
  "esri/Graphic",
  "esri/layers/GraphicsLayer",
  "esri/layers/MapImageLayer",
  "esri/layers/FeatureLayer",
  "esri/geometry/Polygon",
  "esri/geometry/Polyline"
], function (
  MapView, Map,
  SketchViewModel, Graphic, GraphicsLayer,
  FeatureLayer, MapImageLayer,
  Polygon, Polyline
) {

  let editGraphic;
  let polygonEditGraphic;
  let polygonStack = [];
  let id = 0;

  // m.test();

  // GraphicsLayer to hold graphics created via sketch view model
  const graphicsLayer = new GraphicsLayer({
    id: "drawGraphic"
  });

  const tempLayer = new GraphicsLayer({
    id: "tempGraphic"
  });

  const errorLayer = new GraphicsLayer({
    id: "errorGraphic"
  });

  let map = new Map({
    basemap: "gray",
    layers: [tempLayer, errorLayer, graphicsLayer]
  });

  const view = new MapView({
    container: "viewDiv",
    map: map,
    zoom: 3
  });

  const pointSymbol = {
    type: "simple-marker", // autocasts as new SimpleMarkerSymbol()
    style: "square",
    color: "#8A2BE2",
    size: "16px",
    outline: { // autocasts as new SimpleLineSymbol()
      color: [255, 255, 255],
      width: 3
    }
  };

  const polylineSymbol = {
    type: "simple-line", // autocasts as new SimpleLineSymbol()
    color: "#8A2BE2",
    width: "4",
    style: "dash"
  };


  const polylineErrorSymbol = {
    type: "simple-line", // autocasts as new SimpleLineSymbol()
    color: "#FF0000",
    width: "5",
    style: "solid"
  };

  const polygonSymbol = {
    type: "simple-fill", // autocasts as new SimpleFillSymbol()
    color: "#999900",
    style: "solid",
    outline: {
      color: "white",
      width: 1
    }
  };

  view.when(function () {
    // create a new sketch view model
    const sketchViewModel = new SketchViewModel({
      view,
      layer: graphicsLayer,
      pointSymbol,
      polylineSymbol,
      polygonSymbol
    });

    //add polygon object
    const polygonClass = {{reglue:"Polygon/polygon"}};
    var polygonGenerator = polygonClass(errorLayer, tempLayer,  polygonStack, polygonSymbol);

    setUpClickHandler();

    // Listen to create-complete event to add a newly created graphic to view
    sketchViewModel.on("create-complete", addGraphic);

    // Listen the sketchViewModel's update-complete and update-cancel events
    sketchViewModel.on("update-complete", updateGraphic);
    sketchViewModel.on("update-cancel", updateGraphic);

    // Listen the sketchViewModel's events to draw polygon around line
    sketchViewModel.on("create-complete", polygonGenerator.addPolygon);
    sketchViewModel.on("update-complete", polygonGenerator.updatePolygon);
    sketchViewModel.on("update-cancel", polygonGenerator.updatePolygon);

    // called when sketchViewModel's create-complete event is fired.
    function addGraphic(event) {
      // console.log(event);
      // Create a new graphic and set its geometry to
      // `create-complete` event geometry.
      const graphic = new Graphic({
        geometry: event.geometry,
        symbol: sketchViewModel.graphic.symbol,
        graphicId: id++
      });
      polygonGenerator.setEditGraphic(graphic);
      graphicsLayer.add(graphic);
    }

    // Runs when sketchViewModel's update-complete or update-cancel
    // events are fired.
    function updateGraphic(event) {
      // Create a new graphic and set its geometry event.geometry
      var graphic = new Graphic({
        geometry: event.geometry,
        symbol: editGraphic.symbol,
        graphicId: editGraphic.graphicId
      });
      graphicsLayer.add(graphic);
      editGraphic = null
    }

    // set up logic to handle geometry update and reflect the update on "graphicsLayer"
    function setUpClickHandler() {
      view.on("click", function (event) {
        view.hitTest(event).then(function (response) {
          var results = response.results;
          if (results.length > 0) {
            for (var i = 0; i < results.length; i++) {
              // Check if we're already editing a graphic
              if (!editGraphic && results[i].graphic.layer.id === "drawGraphic") {
                // Save a reference to the graphic we intend to update
                editGraphic = results[i].graphic;
                polygonEditGraphic = results[i].graphic;


                // Remove the graphic from the GraphicsLayer
                // Sketch will handle displaying the graphic while being updated
                graphicsLayer.remove(editGraphic);
                sketchViewModel.update(editGraphic);
                break;
              }
            }
          }
        });
      });
    }

    // activate the sketch to create a point
    var drawPointButton = document.getElementById("pointButton");
    drawPointButton.onclick = function () {
      // set the sketch to create a point geometry
      sketchViewModel.create("point");
      setActiveButton(this);
    };

    // activate the sketch to create a polyline
    var drawLineButton = document.getElementById("polylineButton");
    drawLineButton.onclick = function () {
      // set the sketch to create a polyline geometry
      sketchViewModel.create("polyline");
      setActiveButton(this);
    };

    // activate the sketch to create a polygon
    var drawPolygonButton = document.getElementById("polygonButton");
    drawPolygonButton.onclick = function () {
      // set the sketch to create a polygon geometry
      console.log(sketchViewModel.create("polygon"));
      setActiveButton(this);
    };

    // activate the sketch to create a rectangle
    var drawRectangleButton = document.getElementById(
      "rectangleButton");
    drawRectangleButton.onclick = function () {
      // set the sketch to create a polygon geometry
      sketchViewModel.create("rectangle");
      setActiveButton(this);
    };

    // activate the sketch to create a circle
    var drawCircleButton = document.getElementById("circleButton");
    drawCircleButton.onclick = function () {
      // set the sketch to create a polygon geometry
      sketchViewModel.create("circle");
      setActiveButton(this);
    };

    // reset button
    document.getElementById("resetBtn").onclick = function () {
      sketchViewModel.reset();
      graphicsLayer.removeAll();
      setActiveButton();
    };

    function setActiveButton(selectedButton) {
      // focus the view to activate keyboard shortcuts for sketching
      view.focus();
      var elements = document.getElementsByClassName("active");
      for (var i = 0; i < elements.length; i++) {
        elements[i].classList.remove("active");
      }
      if (selectedButton) {
        selectedButton.classList.add("active");
      }
    }

  });
});
