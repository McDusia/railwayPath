require([
  "esri/Map",
  "esri/views/MapView",
  "esri/layers/FeatureLayer",
  "esri/widgets/Sketch/SketchViewModel",
  "esri/Graphic",
  "esri/layers/GraphicsLayer",
  "esri/geometry/Polygon",
  "esri/geometry/Polyline",
  "esri/layers/MapImageLayer",
  "esri/geometry/geometryEngine",
  "esri/geometry/Point",
  "esri/geometry/SpatialReference",
  "esri/geometry/support/webMercatorUtils"
], function (
  Map,
  MapView,
  FeatureLayer,
  SketchViewModel,
  Graphic,
  GraphicsLayer,
  Polygon,
  Polyline,
  MapImageLayer,
  geometryEngine,
  Point,
  SpatialReference,
  webMercatorUtils
) {
  let domGenerator={{reglue:"test/domManipulator"}};
  let reglue={{reglue:"test/testRunner"}};
  console.log("test");



// console.log(Assert.equals("testValidation", function(){return 2}, 2));
  let test1 = reglue.equals("radiusValidationTest", function () {
    let radiusValidator={{reglue:"tjs/Polygon/Validation/radiusValidation"}};
    const view = new MapView({
      container: "viewDiv",
      center: [-118.352, 33.883],
      scale: 50000,
      constraints: {
        rotationEnabled: false
      }
    });
    let params = {minCurvatureRadius: 200};
    let line = {paths: [[[1, 1], [2, 2], [3, 3], [2, 2], [1, 1]]]};
    return radiusValidator(params).getImpossibleRadiusSegments(line).__accessor__.store._values.type;
  }, "polyline");

  let test2 = reglue.equals("connectorTest", function () {
    let radiusValidator={{reglue:"tjs/Connector/connector"}};
    const view = new MapView({
      container: "viewDiv",
      center: [-118.352, 33.883],
      scale: 50000,
      constraints: {
        rotationEnabled: false
      }
    });
    let params = {minCurvatureRadius: 200};
    let line = {paths: [[[1, 1], [2, 2], [3, 3], [2, 2], [1, 1]]]};
    return "connected";
  }, "connected");

  let test3 = reglue.equals("layerMapperTest", function () {
    let radiusValidator={{reglue:"tjs/Connector/layerMapper"};
    const view = new MapView({
      container: "viewDiv",
      center: [-118.352, 33.883],
      scale: 50000,
      constraints: {
        rotationEnabled: false
      }
    });
    let params = {minCurvatureRadius: 200};
    let line = {paths: [[[1, 1], [2, 2], [3, 3], [2, 2], [1, 1]]]};
    return "true";
  }, "true");

  let test4 = reglue.equals("priceCheckerTest", function () {
    let radiusValidator={{reglue:"tjs/Polygon/Validation/radiusValidation"}};
    const view = new MapView({
      container: "viewDiv",
      center: [-118.352, 33.883],
      scale: 50000,
      constraints: {
        rotationEnabled: false
      }
    });
    let params = {minCurvatureRadius: 200};
    let line = {paths: [[[1, 1], [2, 2], [3, 3], [2, 2], [1, 1]]]};
    return radiusValidator(params).getImpossibleRadiusSegments(line).__accessor__.store._values.type;
  }, "polyline");

  let test5 = reglue.equals("elevationCheckerTest", function () {
    let radiusValidator={{reglue:"tjs/Polygon/Validation/radiusValidation"}};
    const view = new MapView({
      container: "viewDiv",
      center: [-118.352, 33.883],
      scale: 50000,
      constraints: {
        rotationEnabled: false
      }
    });
    let params = {minCurvatureRadius: 200};
    let line = {paths: [[[1, 1], [2, 2], [3, 3], [2, 2], [1, 1]]]};
    return radiusValidator(params).getImpossibleRadiusSegments(line).__accessor__.store._values.type;
  }, "polyline");

  let test6 = reglue.equals("squareToPointsTest", function () {
    let radiusValidator={{reglue:"tjs/Polygon/Validation/radiusValidation"}};
    const view = new MapView({
      container: "viewDiv",
      center: [-118.352, 33.883],
      scale: 50000,
      constraints: {
        rotationEnabled: false
      }
    });
    let params = {minCurvatureRadius: 200};
    let line = {paths: [[[1, 1], [2, 2], [3, 3], [2, 2], [1, 1]]]};
    return radiusValidator(params).getImpossibleRadiusSegments(line).__accessor__.store._values.type;
  }, "polyline");

  let test7 = reglue.equals("parcelCheckerTest", function () {
    let radiusValidator={{reglue:"tjs/"}};
    const view = new MapView({
      container: "viewDiv",
      center: [-118.352, 33.883],
      scale: 50000,
      constraints: {
        rotationEnabled: false
      }
    });
    let params = {minCurvatureRadius: 200};
    let line = {paths: [[[1, 1], [2, 2], [3, 3], [2, 2], [1, 1]]]};
    return radiusValidator(params).getImpossibleRadiusSegments(line).__accessor__.store._values.type;
  }, "polyline");

  domGenerator.addTest(test1.name, test1.pass, test1.error);
  domGenerator.addTest(test2.name, test2.pass, test2.error);
  domGenerator.addTest(test3.name, test3.pass, test3.error);
  domGenerator.addTest(test4.name, test4.pass, test4.error);
  domGenerator.addTest(test5.name, test5.pass, test5.error);
  domGenerator.addTest(test6.name, test6.pass, test6.error);
  domGenerator.addTest(test7.name, test7.pass, test7.error);

  domGenerator.generateDom();


});
